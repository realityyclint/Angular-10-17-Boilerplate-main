{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let EmployeeService = /*#__PURE__*/(() => {\n  class EmployeeService {\n    constructor(http) {\n      this.http = http;\n      this.baseUrl = 'https://node-js-mysql-boilerplate-api.onrender.com/accounts/employees';\n    }\n    // üîê Create reusable headers with token\n    getAuthHeaders() {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        console.error('No token found!');\n      }\n      return new HttpHeaders({\n        Authorization: `Bearer ${token || ''}`\n      });\n    }\n    getAll() {\n      return this.http.get(this.baseUrl, {\n        headers: this.getAuthHeaders(),\n        withCredentials: true // Add this if cookies/session are needed\n      });\n    }\n\n    getById(id) {\n      return this.http.get(`${this.baseUrl}/${id}`, {\n        headers: this.getAuthHeaders(),\n        withCredentials: true // Add this if cookies/session are needed\n      });\n    }\n\n    create(employee) {\n      return this.http.post(this.baseUrl, employee, {\n        headers: this.getAuthHeaders(),\n        withCredentials: true // Add this if cookies/session are needed\n      });\n    }\n\n    update(id, employee) {\n      return this.http.put(`${this.baseUrl}/${id}`, employee, {\n        headers: this.getAuthHeaders(),\n        withCredentials: true // Add this if cookies/session are needed\n      });\n    }\n\n    delete(id) {\n      return this.http.delete(`${this.baseUrl}/${id}`, {\n        headers: this.getAuthHeaders(),\n        withCredentials: true // Add this if cookies/session are needed\n      });\n    }\n\n    transfer(id, departmentId) {\n      return this.http.post(`${this.baseUrl}/${id}/transfer`, {\n        departmentId\n      }, {\n        headers: this.getAuthHeaders(),\n        withCredentials: true // Add this if cookies/session are needed\n      });\n    }\n  }\n\n  EmployeeService.…µfac = function EmployeeService_Factory(t) {\n    return new (t || EmployeeService)(i0.…µ…µinject(i1.HttpClient));\n  };\n  EmployeeService.…µprov = /*@__PURE__*/i0.…µ…µdefineInjectable({\n    token: EmployeeService,\n    factory: EmployeeService.…µfac,\n    providedIn: 'root'\n  });\n  return EmployeeService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}